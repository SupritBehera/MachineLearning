# For reading the dataset.csv file
import csv
import random
import math

x = [] # Store x co-ordinate of each point
y = [] # Store y co-ordinate of each point
actual_label = [] # Stores the actual label of each point

with open('dataset.csv', 'r') as dataset_csv_file: # 'r' is read mode
    csv_reader = csv.reader(dataset_csv_file)

    for line in csv_reader:
      # Skip the first line having the column names
      if(line[0] == ''):
        continue
      # line[0] has the serial number of the point, line[1] the x-coordinate, 
      # line[2] the y co-ordinate and line[3] its actual label
      x.append(line[1])
      y.append(line[2])
      actual_label.append(line[3])
      #print(line)

# the k means clustering algorithm requires k, that is the number of clusters
# while there are ways to gather the optimum value of k, for now we give it the
# optimum value, which is 3
num_clusters = 3
#print(x)

def k_means(k):

  # random.sample(range(0, 99), k) returns k random integers in the range of 0 to 99 (as a list)
  #
  # the map function runs the function in the first parameter over all values in the list in the second parameter
  # and stores all the return values in a map object. What we do here is run the lambda function in the first parameter of map ()
  # over the list of k random integers generated by the second index of map(). In each iteration, index takes a value in the list of 
  # random integers, and returns an array containing the x and y co-ordinate of the indexth point. 
  # 
  # We pass the entire thing to the list() function to convert the map object into a list
  # Ultimately, centroids would contain a list of k lists, each having the x and y co-ordinate of a random point
  # which is initially taken as a centroid 

  centroids = list(map(lambda index: [x[index], y[index]] ,random.sample(range(0, 99), k)))
  
  # list containing numbers from 0 to k-1 (both inclusive) representing the cluster number
  #clusters = list(range(0, k))

k_means(num_clusters)






# Function that returns the eucledian distance between two points having 
# co-ordinates (x1, y1) and (x2, y2) in the x-y plane
def eucledian_dist(x1, y1, x2, y2):
  return math.sqrt( ( (x2 - x1) ** 2) - ( (y2 - y1) ** 2) )



